// Autogenerated from Pigeon (v0.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package me.peatiscoding.flutter_ccpp.pigeon;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CcppPaymentCode {
    private String code;
    public String getCode() { return code; }
    public void setCode(String setterArg) { this.code = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("code", code);
      return toMapResult;
    }
    static CcppPaymentCode fromMap(Map<String, Object> map) {
      CcppPaymentCode fromMapResult = new CcppPaymentCode();
      Object code = map.get("code");
      fromMapResult.code = (String)code;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MakeTokenizedCreditCardPaymentInput {
    private String paymentToken;
    public String getPaymentToken() { return paymentToken; }
    public void setPaymentToken(String setterArg) { this.paymentToken = setterArg; }

    private CcppPaymentCode paymentCode;
    public CcppPaymentCode getPaymentCode() { return paymentCode; }
    public void setPaymentCode(CcppPaymentCode setterArg) { this.paymentCode = setterArg; }

    private String cardToken;
    public String getCardToken() { return cardToken; }
    public void setCardToken(String setterArg) { this.cardToken = setterArg; }

    private String securityCode;
    public String getSecurityCode() { return securityCode; }
    public void setSecurityCode(String setterArg) { this.securityCode = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("paymentToken", paymentToken);
      toMapResult.put("paymentCode", paymentCode.toMap());
      toMapResult.put("cardToken", cardToken);
      toMapResult.put("securityCode", securityCode);
      return toMapResult;
    }
    static MakeTokenizedCreditCardPaymentInput fromMap(Map<String, Object> map) {
      MakeTokenizedCreditCardPaymentInput fromMapResult = new MakeTokenizedCreditCardPaymentInput();
      Object paymentToken = map.get("paymentToken");
      fromMapResult.paymentToken = (String)paymentToken;
      Object paymentCode = map.get("paymentCode");
      fromMapResult.paymentCode = CcppPaymentCode.fromMap((Map)paymentCode);
      Object cardToken = map.get("cardToken");
      fromMapResult.cardToken = (String)cardToken;
      Object securityCode = map.get("securityCode");
      fromMapResult.securityCode = (String)securityCode;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CcppPaymentResponse {
    private String responseCode;
    public String getResponseCode() { return responseCode; }
    public void setResponseCode(String setterArg) { this.responseCode = setterArg; }

    private String redirectUrl;
    public String getRedirectUrl() { return redirectUrl; }
    public void setRedirectUrl(String setterArg) { this.redirectUrl = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("responseCode", responseCode);
      toMapResult.put("redirectUrl", redirectUrl);
      return toMapResult;
    }
    static CcppPaymentResponse fromMap(Map<String, Object> map) {
      CcppPaymentResponse fromMapResult = new CcppPaymentResponse();
      Object responseCode = map.get("responseCode");
      fromMapResult.responseCode = (String)responseCode;
      Object redirectUrl = map.get("redirectUrl");
      fromMapResult.redirectUrl = (String)redirectUrl;
      return fromMapResult;
    }
  }

  public interface Result<T> {
    void success(T result);
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface CcppApi {
    void setupProduction();
    void setupSandbox();
    void makeTokenizedCreditCardPayment(MakeTokenizedCreditCardPaymentInput arg, Result<CcppPaymentResponse> result);

    /** Sets up an instance of `CcppApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, CcppApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CcppApi.setupProduction", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.setupProduction();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CcppApi.setupSandbox", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.setupSandbox();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CcppApi.makeTokenizedCreditCardPayment", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              MakeTokenizedCreditCardPaymentInput input = MakeTokenizedCreditCardPaymentInput.fromMap((Map<String, Object>)message);
              api.makeTokenizedCreditCardPayment(input, result -> { wrapped.put("result", result.toMap()); reply.reply(wrapped); });
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
